// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    // Address is >= 24576 if bits 13 and 14 are 1
    And(a=address[13], b=address[14], out=atLeast24576);

    // Check if there is another 1 in bits 0 to 12
    Or8Way(in=address[0..7], out=orBits0to7);
    Or8Way(in=address[5..12], out=orBits5to12);
    Or(a=orBits0to7, b=orBits5to12, out=orBits0to12);

    // If address is greater than 24576, address is invalid
    And(a=atLeast24576, b=orBits0to12, out=invalidAddress);

    // In gets sent to all components, send load to 1 or no location
    // If address is >= 24576, discard load
    // If address >= 16384 then send to Screen, otherwise to RAM
    DMux4Way(in=load, sel[0]=address[14], sel[1]=atLeast24576, a=toRAM, 
            b=toScreen, c=discardLoad1, d=discardLoad2);

	RAM16K(in=in, load=toRAM, address=address[0..13], out=outRAM);

    // Bits 0..12 encompass 8192 screen bits
    Screen(in=in, load=toScreen, address=address[0..12], out=outScreen);
    
    Keyboard(out=outKbd);

    // If invalidAddress, send 0 to output Mux, otherwise send Kbd
    Mux16(a=outKbd, b=false, sel=invalidAddress, out=kbdOrInvalid);

    // If the address is >= 16384, then Screen is selected
    // This is true if bit 14 is 1
    // Keeping in mind that kbdOrInvalid overrides at selection if >= 24576
    Mux4Way16(a=outRAM, b=outScreen, c=kbdOrInvalid, d=kbdOrInvalid, 
            sel[0]=address[14], sel[1]=atLeast24576, out=out);
}